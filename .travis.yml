# thanks to http://stackoverflow.com/questions/29312015/building-with-more-than-one-version-of-a-compiler for the template

language: cpp
dist: trusty

jobs:
  include:
    # "Legacy" build: oldest supported gcc and cmake
    - os: linux
      compiler: gcc
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-4.9', 'build-essential', 'cmake3', 'libfreetype6-dev', 'libgl1-mesa-dev', 'libglew-dev', 'libgtk-3-dev', 'libjpeg-dev', 'libpng-dev', 'libsdl2-dev', 'libupnp-dev', 'libxrandr-dev', 'x11proto-core-dev', 'zlib1g-dev', 'libalut0', 'libgtest-dev']
      env: 
          - OLD_CMAKE=1
          - CCOMPILER=gcc-4.9 
          - CXXCOMPILER=g++-4.9 
          - TYPE=Debug # somehow, the linking fails for release builds. If someone could fix that, that would be great. 
          - BSYS="Unix Makefiles#make -k"

    # "Current" gcc build, used for snapshots
    - os: linux
      compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - sourceline: ppa:beineri/opt-qt596-trusty
          packages: ['g++-5', 'build-essential', 'libpng-dev', 'libjpeg-dev', 'libfreetype6-dev', 'libglew-dev', 'libreadline-dev', 'libsdl2-dev', 'qt59base', 'libalut-dev', 'libvorbis-dev', 'libopenal-dev', 'libdw-dev', 'libgtest-dev', 'ninja-build']
      env:
          - CCOMPILER=gcc-5
          - CXXCOMPILER=g++-5
          - TYPE=RelWithDebInfo
          - CXX_FLAGS="-fdiagnostics-color -I/usr/include/AL"
          - BSYS="Ninja#ninja -k30" PCH=on
          - UPLOAD_SNAPSHOT=1
          - CMAKE_FLAGS="-DCMAKE_INSTALL_PREFIX=/usr -DWITH_AUTOMATIC_UPDATE=ON -DWITH_APPDIR_INSTALLATION=ON"

    # "Current" clang build
    - os: linux
      compiler: clang
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-precise-3.8']
          packages: ['clang-3.8', 'build-essential', 'libfreetype6-dev', 'libgl1-mesa-dev', 'libglew-dev', 'libgtk-3-dev', 'libjpeg-dev', 'libpng-dev', 'libsdl2-dev', 'libupnp-dev', 'libxrandr-dev', 'x11proto-core-dev', 'zlib1g-dev', 'libalut0', 'ninja-build', 'libc++-dev', 'libc++1', 'libgtest-dev']
      env: 
          - CCOMPILER=clang-3.8 
          - CXXCOMPILER=clang++-3.8 
          - CXX_FLAGS="-stdlib=libc++ -fcolor-diagnostics" 
          - TYPE=Debug 
          - BSYS="Ninja#ninja -k30"

    # macOS build
    - os: osx
      compiler: clang
      osx_image: xcode11.3
      install:
          - brew upgrade pkg-config  # https://github.com/Homebrew/brew/issues/5068, presumably can be removed soon
          - brew install freealut glew libogg libvorbis sdl2
      env:
          - CXX_FLAGS="-fcolor-diagnostics"
          - TYPE=RelWithDebInfo
          - BSYS="Unix Makefiles#make -k"
          - CMAKE_FLAGS="-DDEPLOY_QT_LIBRARIES=1 -DCMAKE_PREFIX_PATH=/usr/local/opt/openal-soft;/usr/local/opt/qt"
          - OLD_CMAKE=1
          - UPLOAD_SNAPSHOT=1

before_install:
    - for t in test mock; do wget https://github.com/google/google$t/archive/release-1.7.0.tar.gz -Og$t.tgz && tar xvf g$t.tgz; done 
    # Install current cmake version.
    - >
      if [ -z "$OLD_CMAKE" ]; then
        CMAKE_VERSION=3.14.1
        wget "https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-Linux-x86_64.sh"
        sudo sh "cmake-${CMAKE_VERSION}-Linux-x86_64.sh" --skip-license --prefix=/usr/local
      fi

install:
    - '[ -e /opt/qt59/bin/qt59-env.sh ] && source /opt/qt59/bin/qt59-env.sh || echo building without Qt'

before_script:
    - export CXX="$CXXCOMPILER" CC="$CCOMPILER"
    - export C4REVISION_BRANCH="$TRAVIS_BRANCH"
    - >
      cmake
      -G"${BSYS/\#*/}"
      -DCMAKE_BUILD_TYPE="$TYPE"
      -DCMAKE_CXX_FLAGS="$CXX_FLAGS"
      -DUSE_GCC_PCH=${PCH:-off}
      -DGTEST_ROOT=$PWD/googletest-release-1.7.0
      -DGMOCK_ROOT=$PWD/googlemock-release-1.7.0
      $CMAKE_FLAGS
      .

script:
    - ${BSYS/*#/} all netpuncher tests aul_test
      # TODO: Remove SKIP_IPV6_TEST once Travis generally adds ::1 as loopback address.
    - SKIP_IPV6_TEST=1 ./tests/tests 
    - ./tests/aul_test

after_success:
    - >
      if [ "$UPLOAD_SNAPSHOT" = 1 ]; then
        case "$TRAVIS_OS_NAME" in
          linux)
            echo "Creating AppImage..." &&
            tools/create_appimage.sh &&
            echo "Uploading snapshot..." &&
            tools/upload_snapshot.sh OpenClonk-x86_64.AppImage OpenClonk-x86_64.AppImage.zsync ||
            echo "Snapshot creation has failed"
            ;;
          osx)
            zip -r openclonk.app.zip openclonk.app &&
            tools/upload_snapshot.sh openclonk.app.zip ||
            echo "Snapshot creation has failed"
            ;;
        esac
      fi
